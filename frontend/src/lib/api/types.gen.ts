// This file is auto-generated by @hey-api/openapi-ts

export type ArtifactResponse = {
    id: number;
    name: string;
    artifact_type: string;
};

export type ArtifactResponseForConnections = {
    name: string;
};

/**
 * Schema for a code artifact
 */
export type CodeArtifact = {
    name: string;
    description: string;
    artifact_type?: 'code';
    file_type: string;
    created_at?: string;
    source_url?: (string | null);
    download_url?: (string | null);
    pipeline_name?: (string | null);
    source_name?: (string | null);
};

export enum artifact_type {
    CODE = 'code'
}

/**
 * Schema for a column specification used in pandas dataset artifacts.
 */
export type ColSpec = {
    type: string;
    name: string;
    required: boolean;
};

/**
 * Schema for a connection
 */
export type ConnectionCreation = {
    source: string;
    target: string;
    pipeline: string;
};

export type ConnectionResponse = {
    source: ArtifactResponseForConnections;
    target: ArtifactResponseForConnections;
};

/**
 * Schema for a dataset artifact
 */
export type DatasetArtifact = {
    name: string;
    description: string;
    artifact_type?: 'dataset';
    artifact_subtype: string;
    file_type: string;
    created_at?: string;
    source_url?: (string | null);
    download_url?: (string | null);
    pipeline_name?: (string | null);
    source_name?: (string | null);
    num_rows?: (number | null);
    num_columns?: (number | null);
    data_schema?: (Array<ColSpec> | null);
    index_name?: (string | null);
    index_dtype?: (string | null);
};

export enum artifact_type2 {
    DATASET = 'dataset'
}

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Schema for a hyperparameter used in hyperparameters artifacts.
 */
export type Hyperparameter = {
    name: string;
    value: (number | string | boolean);
};

/**
 * Schema for a hyperparameters artifact
 */
export type HyperparametersArtifact = {
    name: string;
    description: string;
    artifact_type?: 'hyperparameters';
    file_type: string;
    created_at?: string;
    source_url?: (string | null);
    download_url?: (string | null);
    hyperparameters: Array<Hyperparameter>;
    pipeline_name?: (string | null);
    source_name?: (string | null);
};

export enum artifact_type3 {
    HYPERPARAMETERS = 'hyperparameters'
}

/**
 * Schema for a model artifact
 */
export type ModelArtifact = {
    name: string;
    description: string;
    artifact_type?: 'model';
    file_type: string;
    flavor: string;
    created_at?: string;
    source_url?: (string | null);
    download_url?: (string | null);
    pipeline_name?: (string | null);
    source_name?: (string | null);
    dependencies?: (Array<(string)> | null);
    input_format?: (Array<PyTorchFormat> | null);
    output_format?: (Array<PyTorchFormat> | null);
};

export enum artifact_type4 {
    MODEL = 'model'
}

/**
 * Schema for a parameters artifact
 */
export type ParametersArtifact = {
    name: string;
    description: string;
    artifact_type?: 'parameters';
    file_type: string;
    created_at?: string;
    source_url?: (string | null);
    download_url?: (string | null);
    pipeline_name?: (string | null);
    source_name?: (string | null);
};

export enum artifact_type5 {
    PARAMETERS = 'parameters'
}

/**
 * Schema for an input/output format used in PyTorch model artifacts.
 */
export type PyTorchFormat = {
    type: string;
    tensor_spec: TensorSpec;
};

/**
 * Schema for a result used in results artifacts.
 */
export type Result = {
    metric: string;
    value: number;
};

/**
 * Schema for a results artifact
 */
export type ResultsArtifact = {
    name: string;
    description: string;
    artifact_type?: 'results';
    file_type: string;
    results: Array<Result>;
    created_at?: string;
    pipeline_name?: (string | null);
    source_name?: (string | null);
};

export enum artifact_type6 {
    RESULTS = 'results'
}

/**
 * Schema for a tensor specification used in PyTorch model artifacts.
 */
export type TensorSpec = {
    dtype: string;
    shape: Array<(number)>;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type RegisterCodeArtifactRegisterCodePostData = {
    body: CodeArtifact;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type RegisterCodeArtifactRegisterCodePostResponse = (unknown);

export type RegisterCodeArtifactRegisterCodePostError = (HTTPValidationError);

export type RegisterHyperparametersArtifactRegisterHyperparametersPostData = {
    body: HyperparametersArtifact;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type RegisterHyperparametersArtifactRegisterHyperparametersPostResponse = (unknown);

export type RegisterHyperparametersArtifactRegisterHyperparametersPostError = (HTTPValidationError);

export type RegisterDatasetArtifactRegisterDatasetPostData = {
    body: DatasetArtifact;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type RegisterDatasetArtifactRegisterDatasetPostResponse = (unknown);

export type RegisterDatasetArtifactRegisterDatasetPostError = (HTTPValidationError);

export type RegisterModelArtifactRegisterModelPostData = {
    body: ModelArtifact;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type RegisterModelArtifactRegisterModelPostResponse = (unknown);

export type RegisterModelArtifactRegisterModelPostError = (HTTPValidationError);

export type RegisterParametersArtifactRegisterParametersPostData = {
    body: ParametersArtifact;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type RegisterParametersArtifactRegisterParametersPostResponse = (unknown);

export type RegisterParametersArtifactRegisterParametersPostError = (HTTPValidationError);

export type RegisterResultsArtifactRegisterResultsPostData = {
    body: ResultsArtifact;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type RegisterResultsArtifactRegisterResultsPostResponse = (unknown);

export type RegisterResultsArtifactRegisterResultsPostError = (HTTPValidationError);

export type GetArtifactsArtifactsGetResponse = (unknown);

export type GetArtifactsArtifactsGetError = unknown;

export type GetArtifactsForGlobalViewArtifactsGlobalGetResponse = (Array<ArtifactResponse>);

export type GetArtifactsForGlobalViewArtifactsGlobalGetError = unknown;

export type GetArtifactsByPipelineArtifactsPipelinePipelineNameGetData = {
    path: {
        pipeline_name: string;
    };
};

export type GetArtifactsByPipelineArtifactsPipelinePipelineNameGetResponse = (Array<ArtifactResponse>);

export type GetArtifactsByPipelineArtifactsPipelinePipelineNameGetError = (HTTPValidationError);

export type GetNeighborsArtifactsNeighborsNameGetData = {
    path: {
        name: string;
    };
};

export type GetNeighborsArtifactsNeighborsNameGetResponse = (Array<ArtifactResponse>);

export type GetNeighborsArtifactsNeighborsNameGetError = (HTTPValidationError);

export type GetArtifactByNameArtifactsNameNameGetData = {
    path: {
        name: string;
    };
};

export type GetArtifactByNameArtifactsNameNameGetResponse = (unknown);

export type GetArtifactByNameArtifactsNameNameGetError = (HTTPValidationError);

export type RemoveArtifactByNameArtifactsNameNameDeleteData = {
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
    path: {
        name: string;
    };
};

export type RemoveArtifactByNameArtifactsNameNameDeleteResponse = (unknown);

export type RemoveArtifactByNameArtifactsNameNameDeleteError = (HTTPValidationError);

export type GetPipelinesPipelinesGetResponse = (unknown);

export type GetPipelinesPipelinesGetError = unknown;

export type GetPipelinesByArtifactPipelinesArtifactArtifactNameGetData = {
    path: {
        artifact_name: string;
    };
};

export type GetPipelinesByArtifactPipelinesArtifactArtifactNameGetResponse = (unknown);

export type GetPipelinesByArtifactPipelinesArtifactArtifactNameGetError = (HTTPValidationError);

export type GetResultsArtifactsByPipelinePipelinesResultsPipelineNameGetData = {
    path: {
        pipeline_name: string;
    };
};

export type GetResultsArtifactsByPipelinePipelinesResultsPipelineNameGetResponse = (unknown);

export type GetResultsArtifactsByPipelinePipelinesResultsPipelineNameGetError = (HTTPValidationError);

export type GetConnectionsByPipelineConnectionsPipelinePipelineNameGetData = {
    path: {
        pipeline_name: string;
    };
};

export type GetConnectionsByPipelineConnectionsPipelinePipelineNameGetResponse = (Array<ConnectionResponse>);

export type GetConnectionsByPipelineConnectionsPipelinePipelineNameGetError = (HTTPValidationError);

export type CreateConnectionConnectionsCreatePostData = {
    body: ConnectionCreation;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type CreateConnectionConnectionsCreatePostResponse = (unknown);

export type CreateConnectionConnectionsCreatePostError = (HTTPValidationError);

export type GetConnectionsConnectionsGetResponse = (Array<ConnectionResponse>);

export type GetConnectionsConnectionsGetError = unknown;

export type RootGetResponse = (unknown);

export type RootGetError = unknown;