// This file is auto-generated by @hey-api/openapi-ts

export type ArtifactResponse = {
    id: number;
    name: string;
    artifact_type: string;
};

export type ArtifactResponseForConnections = {
    name: string;
};

/**
 * Schema for a code artifact
 */
export type CodeArtifact = {
    name: string;
    description: string;
    artifact_type: string;
    file_type: string;
    created_at?: string;
    source_url?: (string | null);
    download_url?: (string | null);
    pipeline_name?: (string | null);
    source_name?: (string | null);
};

/**
 * Schema for a column specification used in pandas data artifacts.
 */
export type ColSpec = {
    type: string;
    name: string;
    required: boolean;
};

/**
 * Schema for a connection
 */
export type ConnectionCreation = {
    source: string;
    target: string;
    pipeline: string;
};

export type ConnectionResponse = {
    source: ArtifactResponseForConnections;
    target: ArtifactResponseForConnections;
};

/**
 * Schema for a data artifact
 */
export type DataArtifact = {
    name: string;
    description: string;
    artifact_type: string;
    artifact_subtype: string;
    file_type: string;
    created_at?: string;
    source_url?: (string | null);
    download_url?: (string | null);
    pipeline_name?: (string | null);
    source_name?: (string | null);
    num_rows?: (number | null);
    num_columns?: (number | null);
    data_schema?: (Array<ColSpec> | null);
    index_name?: (string | null);
    index_dtype?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Schema for a hyperparameter used in hyperparameters artifacts.
 */
export type Hyperparameter = {
    name: string;
    value: (number | string | boolean);
};

/**
 * Schema for a hyperparameters artifact
 */
export type HyperparametersArtifact = {
    name: string;
    description: string;
    artifact_type: string;
    file_type: string;
    created_at?: string;
    source_url?: (string | null);
    download_url?: (string | null);
    hyperparameters: Array<Hyperparameter>;
    pipeline_name?: (string | null);
    source_name?: (string | null);
};

/**
 * Schema for a model artifact
 */
export type ModelArtifact = {
    name: string;
    description: string;
    artifact_type: string;
    file_type: string;
    flavor: string;
    created_at?: string;
    source_url?: (string | null);
    download_url?: (string | null);
    pipeline_name?: (string | null);
    source_name?: (string | null);
    dependencies?: (Array<(string)> | null);
    input_format?: (Array<PyTorchFormat> | null);
    output_format?: (Array<PyTorchFormat> | null);
};

/**
 * Schema for a parameters artifact
 */
export type ParametersArtifact = {
    name: string;
    description: string;
    artifact_type: string;
    file_type: string;
    created_at?: string;
    source_url?: (string | null);
    download_url?: (string | null);
    pipeline_name?: (string | null);
    source_name?: (string | null);
};

/**
 * Schema for an input/output format used in PyTorch model artifacts.
 */
export type PyTorchFormat = {
    type: string;
    tensor_spec: TensorSpec;
};

/**
 * Schema for a result used in results artifacts.
 */
export type Result = {
    metric: string;
    value: number;
};

/**
 * Schema for a results artifact
 */
export type ResultsArtifact = {
    name: string;
    description: string;
    artifact_type: string;
    file_type: string;
    results: Array<Result>;
    created_at?: string;
    pipeline_name?: (string | null);
    source_name?: (string | null);
};

/**
 * Schema for a tensor specification used in PyTorch model artifacts.
 */
export type TensorSpec = {
    dtype: string;
    shape: Array<(number)>;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type RegisterDataArtifactDataArtifactsPostData = {
    body: DataArtifact;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type RegisterDataArtifactDataArtifactsPostResponse = (unknown);

export type RegisterDataArtifactDataArtifactsPostError = (HTTPValidationError);

export type GetArtifactsDataArtifactsGetResponse = (unknown);

export type GetArtifactsDataArtifactsGetError = unknown;

export type GetArtifactsForGlobalViewDataArtifactsGlobalGetResponse = (Array<ArtifactResponse>);

export type GetArtifactsForGlobalViewDataArtifactsGlobalGetError = unknown;

export type GetArtifactByNameDataArtifactsNameGetData = {
    path: {
        name: string;
    };
};

export type GetArtifactByNameDataArtifactsNameGetResponse = (unknown);

export type GetArtifactByNameDataArtifactsNameGetError = (HTTPValidationError);

export type GetArtifactsByPipelineDataArtifactsPipelinePipelineNameGetData = {
    path: {
        pipeline_name: string;
    };
};

export type GetArtifactsByPipelineDataArtifactsPipelinePipelineNameGetResponse = (Array<ArtifactResponse>);

export type GetArtifactsByPipelineDataArtifactsPipelinePipelineNameGetError = (HTTPValidationError);

export type GetNeighborsDataArtifactsNeighborsNameGetData = {
    path: {
        name: string;
    };
};

export type GetNeighborsDataArtifactsNeighborsNameGetResponse = (Array<ArtifactResponse>);

export type GetNeighborsDataArtifactsNeighborsNameGetError = (HTTPValidationError);

export type GetPipelinesPipelinesGetResponse = (unknown);

export type GetPipelinesPipelinesGetError = unknown;

export type GetPipelinesByArtifactPipelinesArtifactNameGetData = {
    path: {
        artifact_name: string;
    };
};

export type GetPipelinesByArtifactPipelinesArtifactNameGetResponse = (unknown);

export type GetPipelinesByArtifactPipelinesArtifactNameGetError = (HTTPValidationError);

export type GetConnectionsByPipelineConnectionsPipelinePipelineNameGetData = {
    path: {
        pipeline_name: string;
    };
};

export type GetConnectionsByPipelineConnectionsPipelinePipelineNameGetResponse = (Array<ConnectionResponse>);

export type GetConnectionsByPipelineConnectionsPipelinePipelineNameGetError = (HTTPValidationError);

export type CreateConnectionConnectionsCreatePostData = {
    body: ConnectionCreation;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type CreateConnectionConnectionsCreatePostResponse = (unknown);

export type CreateConnectionConnectionsCreatePostError = (HTTPValidationError);

export type GetConnectionsConnectionsGetResponse = (Array<ConnectionResponse>);

export type GetConnectionsConnectionsGetError = unknown;

export type RegisterCodeArtifactCodeArtifactsPostData = {
    body: CodeArtifact;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type RegisterCodeArtifactCodeArtifactsPostResponse = (unknown);

export type RegisterCodeArtifactCodeArtifactsPostError = (HTTPValidationError);

export type RegisterModelArtifactModelArtifactsPostData = {
    body: ModelArtifact;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type RegisterModelArtifactModelArtifactsPostResponse = (unknown);

export type RegisterModelArtifactModelArtifactsPostError = (HTTPValidationError);

export type RegisterHyperparametersArtifactHyperparametersArtifactsPostData = {
    body: HyperparametersArtifact;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type RegisterHyperparametersArtifactHyperparametersArtifactsPostResponse = (unknown);

export type RegisterHyperparametersArtifactHyperparametersArtifactsPostError = (HTTPValidationError);

export type RegisterParametersArtifactParametersArtifactsPostData = {
    body: ParametersArtifact;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type RegisterParametersArtifactParametersArtifactsPostResponse = (unknown);

export type RegisterParametersArtifactParametersArtifactsPostError = (HTTPValidationError);

export type RegisterResultsArtifactResultsArtifactsPostData = {
    body: ResultsArtifact;
    headers: {
        /**
         * User ID of the acting user. Used to identify the user
         */
        'x-user-id': string;
    };
};

export type RegisterResultsArtifactResultsArtifactsPostResponse = (unknown);

export type RegisterResultsArtifactResultsArtifactsPostError = (HTTPValidationError);

export type GetResultsArtifactsByPipelineResultsArtifactsPipelinePipelineNameGetData = {
    path: {
        pipeline_name: string;
    };
};

export type GetResultsArtifactsByPipelineResultsArtifactsPipelinePipelineNameGetResponse = (unknown);

export type GetResultsArtifactsByPipelineResultsArtifactsPipelinePipelineNameGetError = (HTTPValidationError);

export type RootGetResponse = (unknown);

export type RootGetError = unknown;